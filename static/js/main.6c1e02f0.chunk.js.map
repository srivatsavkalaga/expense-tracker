{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","participantInput","setParticipantInput","useState","participants","setParticipants","savedData","localStorage","getItem","JSON","parse","events","setEvents","event","setEvent","eventName","eventExpense","eventPayee","eventParticipants","useEffect","parsed","dataToSave","setItem","stringify","handleChange","e","name","value","target","prev","_objectSpread","[object Object]","balances","calculateBalances","forEach","p","ev","total","parseFloat","payee","people","Number","isFinite","length","share","directDebts","calculateDirectDebts","debts","person","React","createElement","className","type","onClick","masterReset","window","confirm","removeItem","placeholder","onChange","addParticipants","trim","includes","refreshParticipants","map","i","key","min","step","Select","isClearable","options","label","selected","isMulti","selectedValues","opt","addEvent","alert","join","index","filter","_","deleteEvent","Object","entries","_ref","balance","concat","toFixed","keys","flatMap","_ref2","debtor","creditors","_ref3","creditor","amount","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.6c1e02f0.chunk.js","sourcesContent":["import './App.css';\nimport Select from \"react-select\";\nimport React, { useState, useEffect } from 'react';\n\nfunction App() {\n  // const [amount, setAmount] = useState('');\n  // const [type, setType] = useState(\"Food & Groceries\");\n  // const [editMode, setEditMode] = useState(null); // category being edited\n  // const [tripparticipants, setTripparticipants] = useState([]);\n  \n  // Trip-level participants\n// Trip-level participants\n  const [participantInput, setParticipantInput] = useState(\"\");\n\n\n    // Participants\n  const [participants, setParticipants] = useState(() => {\n    const savedData = localStorage.getItem(\"tripData\");\n    if (savedData) {\n      return JSON.parse(savedData).participants || [];\n    }\n    return [];\n  });\n\n  // Events\n  const [events, setEvents] = useState(() => {\n    const savedData = localStorage.getItem(\"tripData\");\n    if (savedData) {\n      return JSON.parse(savedData).events || [];\n    }\n    return [];\n  });\n  // Events\n\n\n  // Temporary event form state\n  const [event, setEvent] = useState({\n    eventName: \"\",\n    eventExpense: \"\",\n    eventPayee: \"\",\n    eventParticipants: [],\n  });\n\n  // --- Local Storage Sync ---\n  useEffect(() => {\n  const savedData = localStorage.getItem(\"tripData\");\n  if (savedData) {\n    const parsed = JSON.parse(savedData);\n    setParticipants(parsed.participants || []);\n    setEvents(parsed.events || []);\n  }\n}, []);\n\nuseEffect(() => {\n  const dataToSave = {\n    participants,\n    events,\n  };\n  localStorage.setItem(\"tripData\", JSON.stringify(dataToSave));\n}, [participants, events]);\n\n\n  // Handle text/number inputs\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setEvent((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  // Handle multi-select participants\n  const handleParticipantsChange = (selected) => {\n    const selectedValues = selected ? selected.map((opt) => opt.value) : [];\n    setEvent((prev) => ({\n      ...prev,\n      eventParticipants: selectedValues,\n    }));\n  };\n\n  // Add participant\n  const addParticipants = () => {\n    if (!participantInput.trim()) return;\n    if (!participants.includes(participantInput)) {\n      setParticipants((prev) => [...prev, participantInput]);\n    }\n    setParticipantInput(\"\");\n  };\n\n  // Refresh participants (clear list)\n  const refreshParticipants = () => {\n    setParticipants([]);\n  };\n\n  // Add new event\n  const addEvent = () => {\n    if (!event.eventName || !event.eventExpense || !event.eventPayee) {\n      alert(\"Please fill all fields\");\n      return;\n    }\n    setEvents((prev) => [...prev, event]);\n    setEvent({\n      eventName: \"\",\n      eventExpense: \"\",\n      eventPayee: \"\",\n      eventParticipants: [],\n    });\n  };\n\n  // Delete an event\n  const deleteEvent = (index) => {\n    setEvents((prev) => prev.filter((_, i) => i !== index));\n  };\n\n  // Master Reset\n  const masterReset = () => {\n    if (window.confirm(\"Are you sure you want to reset everything?\")) {\n      setParticipants([]);\n      setEvents([]);\n      localStorage.removeItem(\"participants\");\n      localStorage.removeItem(\"events\");\n    }\n  };\n\n  // ---- Calculations ----\n\n  // Net balances: positive => should receive, negative => owes\n  const calculateBalances = () => {\n    const balances = {};\n\n    // Initialize with all known participants\n    participants.forEach((p) => (balances[p] = 0));\n\n    events.forEach((ev) => {\n      const total = parseFloat(ev.eventExpense);\n      const payee = ev.eventPayee;\n      const people = ev.eventParticipants || [];\n\n      if (!Number.isFinite(total) || total <= 0) return;\n      if (!payee || people.length === 0) return;\n\n      // Ensure keys exist even if someone wasn't in the initial list\n      if (!(payee in balances)) balances[payee] = 0;\n      people.forEach((p) => {\n        if (!(p in balances)) balances[p] = 0;\n      });\n\n      const share = total / people.length;\n\n      // Every participant owes their share\n      people.forEach((p) => {\n        balances[p] -= share;\n      });\n\n      // Payee gets credited full amount\n      balances[payee] += total;\n    });\n\n    return balances;\n  };\n\n  // Direct debts (event-by-event): debtor -> payee\n  const calculateDirectDebts = () => {\n    const debts = {}; // debts[debtor][creditor] = amount\n\n    events.forEach((ev) => {\n      const total = parseFloat(ev.eventExpense);\n      const payee = ev.eventPayee;\n      const people = ev.eventParticipants || [];\n\n      if (!Number.isFinite(total) || total <= 0) return;\n      if (!payee || people.length === 0) return;\n\n      const share = total / people.length;\n\n      people.forEach((person) => {\n        if (person === payee) return; // payee doesn't owe themselves\n        if (!debts[person]) debts[person] = {};\n        debts[person][payee] = (debts[person][payee] || 0) + share;\n      });\n    });\n\n    return debts;\n  };\n\n  const balances = calculateBalances();\n  const directDebts = calculateDirectDebts();\n  return (\n  <div className=\"p-4\">\n      {/* Master Reset */}\n      <button\n        type=\"button\"\n        onClick={masterReset}\n        className=\"bg-red-700 text-white px-4 py-2 rounded mb-4\"\n      >\n        🔄 Master Reset (New Trip)\n      </button>\n\n      {/* Participants Section */}\n      <h2 className=\"text-xl mb-2\">Add Participants</h2>\n      <input\n        type=\"text\"\n        name=\"Participant\"\n        placeholder=\"Participant name\"\n        value={participantInput}\n        onChange={(e) => setParticipantInput(e.target.value)}\n        className=\"border p-2 mb-2 block w-full\"\n      />\n      <button\n        type=\"button\"\n        onClick={addParticipants}\n        className=\"bg-blue-500 text-white px-4 py-2 rounded\"\n      >\n        Add Participant\n      </button>\n\n      <button\n        type=\"button\"\n        onClick={refreshParticipants}\n        className=\"bg-red-500 text-white px-4 py-2 rounded ml-2\"\n      >\n        Clear Participants\n      </button>\n\n      <h2 className=\"text-xl mt-4\">Trip Participants</h2>\n      <ul className=\"list-disc pl-6 mb-6\">\n        {participants.map((p, i) => (\n          <li key={i}>{p}</li>\n        ))}\n      </ul>\n\n      {/* Event Form */}\n      <h2 className=\"text-xl mb-2\">Add Event</h2>\n      <input\n        type=\"text\"\n        name=\"eventName\"\n        value={event.eventName}\n        onChange={handleChange}\n        placeholder=\"Event name\"\n        className=\"border p-2 mb-2 block w-full\"\n      />\n\n      <input\n        type=\"number\"\n        name=\"eventExpense\"\n        value={event.eventExpense}\n        onChange={handleChange}\n        placeholder=\"Expense amount\"\n        className=\"border p-2 mb-2 block w-full\"\n        min=\"0\"\n        step=\"0.01\"\n      />\n\n      {/* Payee Dropdown (single) */}\n      <label className=\"block mb-2\">Who Paid?</label>\n      <Select\n        isClearable\n        options={participants.map((p) => ({ value: p, label: p }))}\n        value={\n          event.eventPayee\n            ? { value: event.eventPayee, label: event.eventPayee }\n            : null\n        }\n        onChange={(selected) =>\n          setEvent((prev) => ({\n            ...prev,\n            eventPayee: selected ? selected.value : \"\",\n          }))\n        }\n        className=\"mb-4\"\n      />\n\n      {/* Participants Dropdown (multi) */}\n      <label className=\"block mb-2\">Select Participants:</label>\n      <Select\n        isMulti\n        options={participants.map((p) => ({ value: p, label: p }))}\n        value={event.eventParticipants.map((p) => ({ value: p, label: p }))}\n        onChange={handleParticipantsChange}\n        className=\"mb-4\"\n      />\n\n      <button\n        onClick={addEvent}\n        className=\"bg-green-500 text-white px-4 py-2 rounded\"\n      >\n        Add Event\n      </button>\n\n      {/* Events List */}\n      <h2 className=\"text-xl mt-6\">Events List</h2>\n      <ul className=\"list-disc pl-6\">\n        {events.map((e, i) => (\n          <li key={i} className=\"mb-2\">\n            <strong>{e.eventName}</strong> — ₹{e.eventExpense} (paid by{\" \"}\n            {e.eventPayee}) <br />\n            Participants:{\" \"}\n            {e.eventParticipants.length > 0\n              ? e.eventParticipants.join(\", \")\n              : \"No participants\"}\n            <button\n              onClick={() => deleteEvent(i)}\n              className=\"ml-4 bg-red-500 text-white px-2 py-1 rounded\"\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n\n      {/* Net Balances */}\n      <h2 className=\"text-xl mt-6\">Final Balances</h2>\n      <ul className=\"list-disc pl-6\">\n        {Object.entries(balances).map(([person, balance]) => (\n          <li key={person}>\n            {person}:{\" \"}\n            {balance > 0\n              ? `should receive ₹${balance.toFixed(2)}`\n              : balance < 0\n              ? `owes ₹${(-balance).toFixed(2)}`\n              : \"No Balance\"}\n          </li>\n        ))}\n      </ul>\n\n      {/* Event-by-Event Debts (Who owes whom) */}\n      <h2 className=\"text-xl mt-6\">Who Owes Whom</h2>\n      <ul className=\"list-disc pl-6\">\n        {Object.keys(directDebts).length === 0 ? (\n          <li>No Transactions 🎉</li>\n        ) : (\n          Object.entries(directDebts).flatMap(([debtor, creditors]) =>\n            Object.entries(creditors).map(([creditor, amount]) => (\n              <li key={`${debtor}->${creditor}`}>\n                {debtor} owes {creditor} ₹{amount.toFixed(2)}\n              </li>\n            ))\n          )\n        )}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}